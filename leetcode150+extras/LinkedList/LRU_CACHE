class LRUCache {
    class Node{
        int key;
        int val;
        Node prev;
        Node next;
        Node(int key,int val){
            this.key=key;
            this.val=val;
        }
    }
    int capacity;
    Node head;
    Node tail;
    Map<Integer,Node>map;

    public LRUCache(int capacity) {
        this.capacity=capacity;
        map=new HashMap<>();
        head=new Node(0,0);
        tail=new Node(0,0);
        head.next=tail;
        tail.prev=head;
    }  
    
    public int get(int key) {
        if(map.containsKey(key)){
            Node node=map.get(key);
            removeFromMiddle(node);
            insert(key,node);
            return node.val;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            Node node=map.get(key);
            removeFromMiddle(node);
            node.val=value;
            insert(key,node);
        }else{
            Node newNode=new Node(key,value);
            if(map.size()==capacity){
                remove();
            }
            insert(key,newNode);
        }
    }

    public void remove(){
        map.remove(tail.prev.key);
        if(tail.prev.prev!=null) tail.prev.prev.next=tail;
        tail.prev=tail.prev.prev;
    }

    public void insert(int key,Node node){
        head.next.prev=node;
        node.next=head.next;
        node.prev=head;
        head.next=node;
        map.put(key,node);
    }

    public void removeFromMiddle(Node node){
        if(node.prev!=null) node.prev.next=node.next;
        if(node.next!=null) node.next.prev=node.prev;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */