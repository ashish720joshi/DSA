/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int length=0;
        ListNode curr=head;
        while(curr!=null){
            length++;
            curr=curr.next;
        }
        int pos=1;
        int k=length-n;
        curr=head;
        if(pos>k){
            head=head.next;
            return head;
        }
        while(curr!=null){
            if(pos>=k){
                break;
            }
            curr=curr.next;
            pos++;
        }
        if(curr==null) return null;
        if(curr.next==null){
            head.next=null;
            return head;
        }
        curr.next=curr.next.next;
        return head;

    }
}





///alternate solution

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode output=new ListNode(0,head);
        ListNode curr=output;
        while(n!=0){
            head=head.next;
            n--;
        }
        while(head!=null){
            head=head.next;
            curr=curr.next;
        }
        curr.next=curr.next.next;
        return output.next;
    }
}