class Solution {
     private static final int MOD=1000000007;
    
    static long topDown(int n) {
        long []dp=new long[n+1];
        return fibTopDown(n,dp);
    }
    
    static long fibTopDown(int n,long []dp){
        if(n<=1) return n;
        // code here
        if(dp[n]!=0) return dp[n];
        return dp[n]=fibTopDown(n-1,dp)+fibTopDown(n-2,dp)%MOD;
        
    }

    static long bottomUp(int n) {
        // code here
        long []dp=new long[n+1];
        dp[0]=0;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i]=(dp[i-1]+dp[i-2])%MOD;
        }
        return dp[n];
    }
}


class Solution {
    private static final int MOD=1000000007;
    static long topDown(int n) {
        // code here
        long[] dp=new long[n+1];
        for(int i=0;i<=n;i++){
            dp[i]=-1;
        }
        return fibTopDown(n,dp);
    }
    private static long fibTopDown(int n,long[] dp){
        if(n==0) return 0;
        if(n==1) return 1;
        if(dp[n]!=-1) return dp[n];
        dp[n]=(fibTopDown(n-1,dp)+fibTopDown(n-2,dp))%MOD;
        return dp[n];
    }

    static long bottomUp(int n) {
        // code here
        if(n==0) return 0;
        if(n==1) return 1;
        long[] dp=new long[n+1];
        dp[0]=0;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i]=(dp[i-1]+dp[i-2])%MOD;
        }
        return dp[n];
    }
}