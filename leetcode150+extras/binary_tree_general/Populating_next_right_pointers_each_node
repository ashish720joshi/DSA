/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root!=null){
        Queue<Node>queue=new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int length=queue.size();
            Node right=null;
            while(length!=0){
            Node current=queue.poll();
            current.next=right;
            right=current;
            if(current.right!=null){
                queue.offer(current.right);
            }
            if(current.left!=null){
                queue.offer(current.left);
            }
            length--;
        }
        }
        }
        return root;  
    }
}