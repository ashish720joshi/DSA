/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int preorderIndex;
    private Map<Integer,Integer> mapping;

    public TreeNode buildTree(int[] preorder, int[] inorder) {
      mapping=new HashMap<>();
    for(int i=0;i<inorder.length;i++){
        mapping.put(inorder[i],i);
    }
    return buildSubTree(preorder,0,preorder.length-1);
    }

    private TreeNode buildSubTree(int [] preorder,int start,int end){
        if(start>end)return null;

        int rootVal=preorder[preorderIndex++];
        int mid=mapping.get(rootVal);
        TreeNode root=new TreeNode(rootVal);
        root.left=buildSubTree(preorder,start,mid-1);
        root.right=buildSubTree(preorder,mid+1,end);
        return root;
        }
        }