/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer,Integer>mapping;
    private int postorderindex;

    public TreeNode buildTree(int[] inorder, int[] postorder) {
        mapping=new HashMap<>();
        postorderindex=postorder.length-1;
       for(int i=0;i<inorder.length;i++){
            mapping.put(inorder[i],i);
       }
       return buildSubTree(postorder,0,postorderindex);
    }

    private TreeNode buildSubTree(int []postorder,int start,int end){
        if(start>end) return null;

        int rootval=postorder[postorderindex--];
        int index=mapping.get(rootval);
        TreeNode root=new TreeNode(rootval);
        root.right=buildSubTree(postorder,index+1,end);
        root.left=buildSubTree(postorder,start,index-1);
        return root;
      
    }
}