/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        Deque<Integer>postorderqueue=new ArrayDeque<>();
        for(int i=0;i<postorder.length;i++){
            postorderqueue.offer(postorder[i]);
        }
        return buildSubTree(postorderqueue,inorder);
    }

    private TreeNode buildSubTree(Deque<Integer>postorderqueue,int []inorder){
        if(inorder.length>0){
            int rootval=postorderqueue.removeLast();
            int index=findIndex(inorder,rootval);
            TreeNode root=new TreeNode(rootval);
            root.right=buildSubTree(postorderqueue,Arrays.copyOfRange(inorder,index+1,inorder.length));
            root.left= buildSubTree(postorderqueue,Arrays.copyOfRange(inorder,0,index));
            return root;
        }
        return null;
    }

    private int findIndex(int []inorder,int val){
        for(int i=0;i<inorder.length;i++){
            if(inorder[i]==val) return i;
        }
        return -1;
    }
}