class Solution {
    private List<Integer>[] graph;

    public boolean validPath(int n, int[][] edges, int source, int destination) {
        boolean []visited=new boolean[n];
        graph=new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            graph[u].add(v);
            graph[v].add(u);
        }

        return dfs(source, -1, destination,visited);
    }

    private boolean dfs(int node, int parent, int destination,boolean []visited) {
        if (node == destination)
            return true;
        visited[node]=true;
        for (int neighbour : graph[node]) {
            if (neighbour != parent && !visited[neighbour]) {
                 if(dfs(neighbour, node, destination,visited))
                 return true;
            }
        }
        return false;
    }
}