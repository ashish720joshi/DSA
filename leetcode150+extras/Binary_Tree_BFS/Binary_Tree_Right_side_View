/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        Set<Integer>set=new HashSet<>();
        List<Integer>list=new ArrayList<>();
        printRightSideView(root,set,0,list);
        return list;
    }

    private void printRightSideView(TreeNode root,Set<Integer>set,int level,List<Integer>list){
        if(root==null) return;
        if(!set.contains(level)){
            set.add(level);
            list.add(root.val);
        } 
        printRightSideView(root.right,set,level+1,list);
        printRightSideView(root.left,set,level+1,list);
    }
}

//space optimized solution

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int maxLevel=-1;
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer>list=new ArrayList<>();
        int level=0;
        printRightSideView(root,level,list);
        return list;
    }

    private void printRightSideView(TreeNode root,int currentLevel,List<Integer>list){
        if(root==null) return;
        if(currentLevel>maxLevel){
            list.add(root.val);
            maxLevel=Math.max(currentLevel,maxLevel);
        } 
        printRightSideView(root.right,currentLevel+1,list);
        printRightSideView(root.left,currentLevel+1,list);
    }
}