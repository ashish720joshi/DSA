class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer>startingIndices=new ArrayList<>();
        int wordLen=words[0].length();
        int n=s.length();
        int windowSize=wordLen*words.length;
        Map<String,Integer>wordMap=new HashMap<>();
        for(int i=0;i<words.length;i++){
            wordMap.put(words[i],wordMap.getOrDefault(words[i],0)+1);
        }

        for(int i=0;i<wordLen;i++){
            int left=i;
            int right=i;
            Map<String,Integer>windowMap=new HashMap<>();
            while(right+wordLen <= n){
                String word=s.substring(right,right+wordLen);
                right+=wordLen;

                if(wordMap.containsKey(word)){
                    windowMap.put(word,windowMap.getOrDefault(word,0)+1);

                    while(windowMap.get(word)>wordMap.get(word)){
                        String leftWord = s.substring(left, left + wordLen);
                        windowMap.put(leftWord,windowMap.get(leftWord)-1);
                        left+=wordLen;
                    }

                    if(right-left==windowSize){
                        startingIndices.add(left);
                    }

                }else{
                    windowMap.clear();
                    left=right;
                }
            }
        }

        return startingIndices;
    }
}