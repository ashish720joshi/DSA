//better optimized

//keeping last Seen index of the char to avoid keeping frequency and direclty moving index lastSeen Index+1

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> lastSeen = new HashMap<>();
        int left = 0, right = 0, maxLen = 0;
        while (right < s.length()) {
            char c = s.charAt(right);
            if (lastSeen.containsKey(c)) {
               left=Math.max(left,lastSeen.get(c)+1);
            }
            lastSeen.put(c,right);
            maxLen = Math.max(maxLen, right - left + 1);
            right++;
        }
        return maxLen;

    }
}

// keeping count of every characters to check when to move the window
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> charCount = new HashMap<>();
        int left = 0, right = 0, maxLen = 0;
        while (right < s.length()) {
            char c = s.charAt(right);
            charCount.put(c,charCount.getOrDefault(c,0)+1);
            while (charCount.containsKey(c) && charCount.get(c)>1) {
                char d=s.charAt(left);
                if(charCount.get(d)==1) charCount.remove(d);
                else charCount.put(d,charCount.get(d)-1);
                left++;
            }
            maxLen = Math.max(maxLen, right - left + 1);
            right++;
        }
        return maxLen;

    }
}
